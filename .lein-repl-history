(start-server)
(use 'picture-gallery.handler)
(start-server)
(use 'picture-gallery.repl)
(start-server)
(reload 'picture-gallery.repl)
(use 'picture-gallery.repl :reload)
(use 'picture-gallery.models.db)
(use 'picture-gallery.mo)
(use 'picture-gallery.models.db)
(use 'picture-gallery.repl :reload)
(use 'picture-gallery.models.db)
exit
(use 'picture-gallery.models.db)
(create-user-table)
exit
(use 'picture-gallery.models.db)
(drop-table users)
(drop-table :users)
(create-user-table)
(use 'picture-gallery.repl)
(start-server)
(drop-table :users)
(use 'picture-gallery.models.db :reload)
(create-user-table)
(start-server)
(use 'picture-gallery.models.db)
(get-user "admin")
(let [user (get-user "admin)])
user
)
(let [a "5"])
a
(:pass (get-user "admin"))
(use 'picture-gallery.repl)
(start-server)
{:pass (get-user "admin")}
(:pass (get-user "admin"))
(get-user "admin")
(-> (get-user "admin") :pass)
((get-user "admin") :pass)
(:id (get-user "admin"))
(get-in  (get-user "admin") [:pass])
(get-in  (get-user "admin") [:id])
(get-user "admin")
(use 'picture-gallery.models.db :reload)
(get-user "admin")
(get-in  (get-user "admin") [:id])
(start-server)
exit
(use 'picture-gallery.repl)
(start-server)
(use 'picture-gallery.routes.upload :reload)
(start-server)
(stop-server)
(start-server)
exit
(use 'picture-gallery.repl)
(start-server)
exit
(use 'picture-gallery.repl)
(start-server)
File
import java.io.File
(java.io.File. "/foo/bar")
(java.io.File/separator. "/foo/bar")
(java.io.File/separator)
exit
(use 'picture-gallery.repl)
(start-server)
(use 'picture-gallery.schema)
(use 'picture-gallery.models.schema)
(create-image-table)
exit
(use 'picture-gallery.repl)
(start-server)
exit
(use 'picture-gallery.models.db)
(get-images 'admin')
(get-user 'admin')
exit
(use 'picture-gallery.models.db)
(get-user 'admin')
(drop-table 'images')
(drop-table images)
(drop-table 'images')
exit
(use 'picture-gallery.models.db)
(get-user 'admin')
exit
(use 'picture-gallery.models.db)
(get-user 'admin')
(drop-table 'images')
(.getNextException)
(use 'picture-gallery.repl)
(start-server)
(get-user 'admin')
(use picture-gallery.models.db)
(use 'picture-gallery.models.db)
(get-user 'admin)
(get-user admin)
(get-user "admin")
exit
(use 'picture-gallery.models.db)
(get-images "admin")
(doseq [k (get-images "admin")] (println k))
(doseq [:filename (get-images "admin")])
(for [:filename (get-images "admin")])
(for [{:keys [filename]} (get-images "admin")]
(println filename))
(count (get-images "admin"))
(map (fn [file] (println (str "/" file))) (get-images "admin")
)
(use 'picture-gallery.repl)
(start-server)
(use 'picture-gallery.handler :reload)
(use 'picture-gallery.routes.gallery)
(use 'picture-gallery.handler :reload)
exit
(use 'picture-gallery.repl)
(start-server)
(use 'picture-gallery.models.db)
(map (fn [filename] (println filename)) (get-images "admin"))
(map (fn [filename] (println [:filename filename])) (get-images "admin"))
(map (fn [filename] (println (:filename filename))) (get-images "admin"))
exit
(use 'picture-gallery.models.db)
(map (fn [file] (println (:filename file))) (get-images "admin"))
(map (fn [file] (println (str "/img/admin/" (:filename file))) (get-images "admin"))
)
(map (fn [file] (println (str "/img/admin/" (:filename file)))) (get-images "admin"))
(use 'picture-gallery.repl)
(start-server)
(use 'picture-gallery.routes.gallery :reload)
(use 'picture-gallery.repl)
(start-server)
